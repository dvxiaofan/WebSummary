<!doctype html>
<html lang="en" class="fixed">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>导出测试</title>
     <link rel="apple-touch-icon" sizes="120x120" href="../../helsinki-blue/favicon/apple-icon-120x120.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../helsinki-blue/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../helsinki-blue/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../helsinki-blue/favicon/favicon-16x16.png">
    <link rel="stylesheet" type="text/css" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.4/css/bootstrap.min.css">
    <link href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/animate.css/animate.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/toastr/toastr.min.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/magnific-popup/magnific-popup.css">
    <link rel="stylesheet" href="../../helsinki-blue/stylesheets/css/style.css">
    <link href="../../helsinki-blue/user/H-ui.admin.css" rel="stylesheet" />
    <link rel="stylesheet" href="../../helsinki-blue/vendor/pnotify/pnotify.custom.css">
    <link href="../../helsinki-blue/user/css/bootstrap-user.css" rel="stylesheet" />
    <link href="../../helsinki-blue/user/layui/css/layui.css" rel="stylesheet" />
    <link href="../../helsinki-blue/user/css/MyTreeStyle.css" rel="stylesheet" />


     <style type="text/css">
        /*INFO 按钮蓝色*/
       .btn-info
        {
            background-color: #3E79BB;
            border-color: #3E79BB;
        } 
       /*INFO 按钮禁用淡蓝色*/
       .btn-info.disabled, .btn-info[disabled] {
            background-color: #88bffc;
            border-color: #88bffc;
        }
        /*表格字体颜色，黑色*/
       .layui-table {
            color: #232323;
        }
       /*下拉列表选择颜色-蓝色*/
       .layui-form-select dl dd.layui-this {
            background-color: #3E79BB;
        }
     
         .datesheet {
    width: 100%;
    height: 50px;
    line-height: 40px;
    margin-top: 12px;
    background: #f8f8f8;
    border: 1px solid #CCC;
}

</style>
</head>




<body class="row animated " style="overflow:-Scroll;overflow-y:hidden;margin-left:0px;height:100%;" > 
   

    <!--右侧正文-->
    <div id="right_panle_id">
        <div class="user_content" , id="user_content_id_1" style="overflow:hidden;height:100%;">
            <div class="row animated ">

                <div class="panel" style="height:100%;width:100%;min-width:1100px;" id="user_panel_id_1" >
                    <div class="panel-content">


                        <form class="form-inline">                                                                   
                            <div class="form-group">
                                <h4 class="section-subtitle"><b>导出测试</b>&nbsp;&nbsp;<a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_st_id">编号：0</a><a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_name_id">名称：0</a></h4>
                            </div>
                            <div class="form-group"  style="float:right">
                                 <button  class="btn btn-info fa fa-refresh" onclick="RefreshPage_onClick()" type="button">&nbsp;&nbsp;刷新</button>
                            </div>           
                        </form>
                        <hr  style="margin-top:-17px;background-color:#3E79BB;height:2px;">

                        <div class="layui-form datesheet">
                          <div class="layui-form-item">
                            <div class="layui-inline">
                              <label class="layui-form-label"><nobr>开始时间:</nobr></label>
                              <div class="layui-input-inline">
                                <input class="layui-input" id="test11" placeholder="yyyy年MM月dd日" type="text">
                              </div>
                            </div>
                            <div class="layui-inline" style="margin-left:-25px;">
                              <label class="layui-form-label"><nobr>结束时间:</nobr></label>
                              <div class="layui-input-inline">
                                <input class="layui-input" id="test12" placeholder="yyyy年MM月dd日" type="text">
                              </div>
                            </div>
   
                            <div class="layui-inline" style="margin-top:5px;margin-left:-18px;">
                              <button class="btn btn-info fa fa-search" style="height:36px;" onclick="query_data_onclick()" type="button" >&nbsp;&nbsp;搜索</button>
                              
                            </div>

                             <div class="layui-inline" style="margin-left:-18px;">
                              
                                <form class="layui-form">
                                    <label class="layui-form-label"><nobr>快速搜索:</nobr></label>
                                        <div class="layui-input-inline" style="width:110px;">
                                        <select name="quiz" lay-filter="select_filter">
                                            <option value="0">未选择</option>
                                            <option value="1">最近1天</option>
                                            <option value="3">最近3天</option>
                                            <option value="7">最近7天</option>
                                            <option value="15">最近15天</option>
                                            <option value="30">最近30天</option>
                                        </select>
                                        </div>
                                </form>
                              </div>

                              <div class="layui-inline" style="margin-top:5px;margin-left:-8px;">
                                <button class="btn btn-info fa fa-download" style="height:36px;" onclick="down_this_page_onclick()" type="button" >&nbsp;&nbsp;导出当前页</button>
                              </div>

                              <div class="layui-inline" style="margin-top:5px;margin-left:-8px;">
                                <button class="btn btn-info fa fa-download" style="height:36px;" onclick="down_all_page_onclick()" type="button" >&nbsp;&nbsp;导出所有页</button>
                              </div>
                              
                          </div>
                        </div>
      
                        <!--此处放一个表格-->
                        <div id="table_and_page_div_id" style="margin-top:-5px;">
                            <table id="device_list_table_id" lay-filter="tabl_lay_filter"></table>
                            <div class="btn-group" style="margin-left: auto;margin-right: auto;" id="limt_butt_id">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    </div>




<script src="../../helsinki-blue/javascripts/jquery.min.js"></script>
<script src="../../helsinki-blue/vendor/bootstrap/js/bootstrap.min.js"></script>
<script src="../../helsinki-blue/vendor/nano-scroller/nano-scroller.js"></script>
<script src="../../helsinki-blue/javascripts/template-script.min.js"></script>
<script src="../../helsinki-blue/javascripts/template-init.min.js"></script>
<script src="../../helsinki-blue/vendor/toastr/toastr.min.js"></script>
<script src="../../helsinki-blue/vendor/magnific-popup/jquery.magnific-popup.min.js"></script>
    
<!-- 相关js -->
<script src="../../Scripts/md5/md5.js"></script>
<script src="../../helsinki-blue/vendor/pnotify/pnotify.custom.js"></script>
<script src="../../helsinki-blue/javascripts/examples/ui-elements/notifications-pnotify.js"></script>
<script src="../../helsinki-blue/user/js/SetUser.js"></script>
<script src="../../helsinki-blue/user/js/Public_UserControl.js"></script>
<script src="../../helsinki-blue/user/layer/layer.js"></script>
<script src="../../helsinki-blue/user/layui/layui.js"></script>
<script src="../../helsinki-blue/user/js/MyTree.js"></script>
<script src="../../helsinki-blue/user/js/DeviceGroupList.js"></script>
<script src="https://cuikangjie.github.io/JsonExportExcel/dist/JsonExportExcel.min.js"></script>
<script src="../../helsinki-blue/user/js/PublicDataRequest.js"></script>


<!-- 界面js代码 -->
<script type="text/javascript">
    
    var g_DataAllCnt = 0;                                   //数据总数
    var g_HistDataObj = [];                                 //当前历史数据
    var g_AllEssDataCache;                                  //所有要素数据列表-从父页面加载
    var g_TableData;                                        //当前表格显示的数据
    var cg_OnePageDataCount = 100;
    var g_ThisST;                                           //当前设备ST
    var g_ThisName;                                         //当前设备Name
    var g_layer_msg_index;                                  //加载框id
    var g_SelectPageIndex = 0;
    var g_StartTime;
    var g_EndTime;
    var g_TempStartTime;                                    //临时存放时间控件的时间，格式为：{"year":2018,"month":7,"date":25,"hours":0,"minutes":0,"seconds":0}
    var g_TempEndTime;                                      //临时存放时间控件的时间，格式为：{"year":2018,"month":7,"date":25,"hours":0,"minutes":0,"seconds":0}
    var g_MyTree;

    //表头
    var g_table_cols = [];

    //table表格配置
    var g_table_config = {
        elem: '#device_list_table_id'
        , data: null
        , limit: cg_OnePageDataCount   //每页显示50条
        , text: { none: '暂无相关数据' }
        , height: 'full-200'
        , cellMinWidth: 70 //全局定义常规单元格的最小宽度，layui 2.2.1 新增
      , page: false //开启分页
      , cols: [g_table_cols]
         , even: true //开启隔行背景
        , size: 'sm' //小尺寸的表格    
    };

    //底部分页栏配置
    var g_table_limt = {
        elem: 'limt_butt_id',
        theme: '#3E79BB',                   //主题风格
        count: 0,              //总数
        limit: cg_OnePageDataCount,         //单页显示数据条数
        groups: 10,      //连续出现的页码个数
        curr: (g_SelectPageIndex + 1),             //当前页码
        layout: ['prev', 'page', 'next', 'count'],
        jump: function (obj, first) {//分页回调
            table_limt_jump_event(obj, first);  //翻页处理
        }
    };

    //用于记录当前滑动条位置
    var g_scrollTop = {
        dev_obj: null,          //layui table 父div
        layuitable: null,       //当前的layui table
        scrollTop: 0            //记录位置
    };

    function choosele(num, cur) {
        if (num == cur) {
            return " choose";
        } else {
            return "";
        }
    }
    //初始化加载执行
    window.onload = function () {   //要执行的js代码段  

        $.ajaxSettings.async = false;                   //由于有ajax，强制js为同步执行
        //loading_message('加载数据中...');                 //弹出提示框

        //自动高度-右侧正文
        var oDiv = document.getElementById('user_content_id_1');
        oDiv.style.height = ($(window).height() - 2) + 'px';

        //自动高度右侧panle
        var oDiv = document.getElementById('user_panel_id_1');
        oDiv.style.height = ($(window).height() - 40 + 10) + 'px';

        g_AllEssDataCache = AllDeviceEssInit();         //初始化所有要素数据
        //下载数据
        g_AllDeviceList = ajaxSyncGetDeviceList();    //获取当前用户所有设备基本信息列表   
        g_AllGroupList = ajaxSyncGetAllGroupList();   //获取所有分组信息
        //alert(JSON.stringify(g_AllGroupList), 4);
        //准备要显示的数据
        var ObjArr = conversion_data_tree_node(g_AllGroupList, g_AllDeviceList, 0);//子列表数据源
        g_tree_config.ParentData = ObjArr[0];       //父标签数据源 
        g_tree_config.LiData = ObjArr[1];
        // alert(JSON.stringify(g_tree_config.ParentData), 4);
        //alert(JSON.stringify(g_tree_config.LiData), 4);
        g_MyTree = new tree_list(g_tree_config);
        g_MyTree.render();  //绘制列表

        g_ThisST = '0137000001';            //当前设备ST
        g_ThisNAME = '内蒙古岱海电厂排水渠';   //当前设备NAME

        g_StartTime = '2018-05-03 00:00:00';
        g_EndTime = '2018-05-23 23:59:59';

        SelectAndGetDeviceHistData(g_ThisST, g_ThisNAME, g_StartTime, g_EndTime);   //获取并显示当前选择的设备的数据

        close_message();                                    //关闭提示框 
    }

    //导出当前页数据
    function down_this_page_onclick() {
        try {
            if (g_TableData == null || g_TableData.length == 0) {
                layer.msg('错误：没有数据需要导出，请先查询数据！', { icon: 5, scrollbar: false });
                return;
            }
            var sheetFilter = [];
            var sheetHeader = [];
            //准备字段与字段别名
            for (var i = 0; i < g_table_cols.length; i++) {
                sheetFilter[i] = g_table_cols[i].field;
                sheetHeader[i] = g_table_cols[i].title;
            }
            var option = {};
            option.fileName = '测试数据导出';
            option.datas = [
              {
                  sheetData: g_TableData,
                  sheetName: 'sheet',
                  sheetFilter: sheetFilter,
                  sheetHeader: sheetHeader
              }
            ];
            var toExcel = new ExportJsonExcel(option);
            toExcel.saveExcel();

        } catch (e) {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }


    //导出所有页数据
    function down_all_page_onclick() {
        try {



            if (g_TableData == null || g_TableData.length == 0) {
                layer.msg('错误：没有数据需要导出，请先查询数据！', { icon: 5, scrollbar: false });
                return;
            }

            loading_message1('加载数据中...');                    //弹出提示框
            //延时先等等加载中...显示出来后再加载数据
            setTimeout(
               function () {

                   var AllData = DownAllData();                 //下载数据
                   if (AllData == null || AllData.length == null) {
                       close_message();                                    //关闭提示框 
                       layer.msg('错误：没有数据需要导出，请先查询数据！', { icon: 5, scrollbar: false });
                       return;
                   }
                   var sheetFilter = [];
                   var sheetHeader = [];
                   //准备字段与字段别名
                   for (var i = 1; i < g_table_cols.length; i++) {

                       sheetFilter[i - 1] = g_table_cols[i].field;
                       sheetHeader[i - 1] = g_table_cols[i].title;
                   }

                   var option = {};
                   //https://www.cnblogs.com/kin-jie/p/6180707.html
                   option.fileName = g_ThisNAME + '(' + g_ThisST + ')' + '历史数据导出';
                   option.datas = [
                     {
                         sheetData: AllData,
                         sheetName: 'sheet',
                         sheetFilter: sheetFilter,//['two', 'one'],
                         sheetHeader: sheetHeader,//['第一列', '第二列']
                     }
                   ];
                   close_message();                                    //关闭提示框 
                   var toExcel = new ExportJsonExcel(option);
                   toExcel.saveExcel();
               }
                , 100);

        } catch (e) {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //setTimeout(function () { }, 1000);
    //下载所有数据，用于本地数据导出，需要一个进度条
    function DownAllData() {
        var AllData_Obj = [];
        var page_count = Math.ceil(g_DataAllCnt / 500); //向上取整-获取页数

        try {
            for (var i = 0; i < page_count; i++) {
                var DataObj = ajaxSyncGetHistData(g_ThisST, g_StartTime, g_EndTime, false, i * 500, 500);   //获取第一页数据
                if (DataObj == null || DataObj.length == 0) //提前结束了，退出
                {
                    layer.alert("错误：获取数据失败，提前结束了数据下载！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                    break;
                }
                else {
                    for (var j = 0; j < DataObj.length; j++) //拷贝数据到列表中-列表中存放所有的数据
                    {
                        AllData_Obj[i * 500 + j] = DataObj[j];
                    }
                }
            }
        } catch (e) {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }

        return AllData_Obj;
    }

    //浏览器窗口大小变化事件
    $(window).resize(function () {          //当浏览器大小变化时
        //自动高度
        var oDivContent = document.getElementById('user_content_id_1');
        oDivContent.style.height = ($(window).height() - 2) + 'px';

        //自动高度
        var oDiv = document.getElementById('div_scroll_id');
        oDiv.style.height = ($(window).height() - 2) + 'px';

    });

    //刷新底部分页栏(AllDataCount:总的数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始,无需修改的参数可以为null)
    function table_limt_refresh(AllDataCount, OnePageCount, ThisPageIndex) {
        //刷新底部的分页栏
        layui.use('laypage', function () {
            var laypage = layui.laypage;
            //执行一个laypage实例-设置分页
            if (AllDataCount != null) {
                g_table_limt.count = AllDataCount;          //数总数
            }
            if (OnePageCount != null) {
                g_table_limt.limit = OnePageCount;          //单页显示数据条数
            }
            if (ThisPageIndex != null) {
                g_table_limt.curr = ThisPageIndex + 1;      //当前页
            }
            laypage.render(g_table_limt);                   //重新刷新底部分页
        });
    }

    //刷新某个站点数据
    function SelectAndGetDeviceHistData(ST, NAME, StartTime, EndTime) {
        try {

            //刷新站点编号与名称
            document.getElementById('lable_st_id').innerHTML = '编号：' + ST;
            document.getElementById('lable_name_id').innerHTML = '名称：' + NAME;


            g_SelectPageIndex = 0;      //页索引为0
            //下载当前设备的历史数据
            g_DataAllCnt = ajax_sync_get_hist_data_count(ST, StartTime, EndTime, false);           //获取数据条数
            if (g_DataAllCnt > 0) {
                g_HistDataObj = ajaxSyncGetHistData(ST, StartTime, EndTime, false, 0, 100);   //获取第一页数据
            }
            else {
                g_HistDataObj = [];
            }
            g_TableData = conversion_data_layui_table(g_HistDataObj, 1);                            //将数据转换为能被显示的格式
            g_table_config.cols[0] = g_table_cols;                                                  //更新字段
            //alert(JSON.stringify(g_table_cols, 4));        //调试显示信息
            //alert(JSON.stringify(g_DeviceInfoDataPage, 4));        //调试显示信息

            if (g_tableIns != null) {                                       //表格重载
                g_table_config.data = g_TableData;
                g_tableIns.reload(g_table_config);
            }
            else {
                data_table_init(g_TableData);                                           //初始化表格
            }
            table_limt_refresh(g_DataAllCnt, cg_OnePageDataCount, g_SelectPageIndex);  //刷新底部的分页栏
        }
        catch (e) {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //表格翻页处理
    function table_limt_jump_event(obj, first) {
        try {
            //obj包含了当前分页的所有参数，比如：
            //console.log(obj.curr); //得到当前页，以便向服务端请求对应页的数据。
            // console.log(obj.limit); //得到每页显示的条数

            //首次不执行
            if (!first) {
                //alert(obj.curr + " " + obj.limit);
                if (g_DataAllCnt == 0) {
                    layer.alert("没有数据", { icon: 5, scrollbar: false }); //5：失败；6：成功
                    return;
                }


                //弹出提示框
                g_layer_msg_index = layer.msg('加载中',
                {
                    icon: 16
                    , shade: 0.1 //越大界面越黑
                    , time: 60000,//时间
                    anim: 0, //平滑放大
                    scrollbar: false//锁定浏览器滑动
                });

                g_SelectPageIndex = obj.curr - 1;   //获取当前页索引



                g_HistDataObj = ajaxSyncGetHistData(g_ThisST, g_StartTime, g_EndTime, false, g_SelectPageIndex * cg_OnePageDataCount, cg_OnePageDataCount);   //获取第n页数据

                g_TableData = conversion_data_layui_table(g_HistDataObj, g_SelectPageIndex * cg_OnePageDataCount + 1);                            //将数据转换为能被显示的格式
                g_table_config.cols[0] = g_table_cols;                                                  //更新字段
                //alert(JSON.stringify(g_table_cols, 4));        //调试显示信息
                //alert(JSON.stringify(g_DeviceInfoDataPage, 4));        //调试显示信息

                RecordScrollTop();      //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
                //刷新当前页
                g_table_config.data = g_TableData;
                g_table_config.cols[0] = g_table_cols;                                                  //更新字段
                g_tableIns.reload(g_table_config);

                layer.close(g_layer_msg_index);      //关闭提示框
                RestoreScrollTop();      //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
            }
            else {
                g_SelectPageIndex = obj.curr - 1;
            }
        }
        catch (e) {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //初始化表格(只能调用一次，并且会在调用后延时一段时间才能初始化完成)DataTableObj:当前要显示的数据；AllDataCount：总数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始
    function data_table_init(DataTableObj) {
        layui.use('table', function () {
            var table1 = layui.table;
            //第一个实例
            g_table_config.data = DataTableObj;
            g_tableIns = table1.render(g_table_config);
        });
    }

    //在要素字段总表中查找当前字段名
    function get_field_name(AllEssDataCache, field) {

        try {
            for (var i = 0; i < AllEssDataCache.length; i++) {
                if (AllEssDataCache[i].标识符ASCII码 == field) {
                    return AllEssDataCache[i].编码要素 + '(' + AllEssDataCache[i].量和单位 + ')';
                }
            }
        } catch (e) {

        }
        return field;
    }

    //将获取到的设备数据转换为能被layui table显示的数据 DeviceHistData:历史数据,StartRowNumber:当前显示的行号起始，从1开始；
    function conversion_data_layui_table(DeviceHistData, StartRowNumber) {
        var DeviceTableData = JSON.parse('[]');                  //清空数据，创建一个对象数组
        g_FieldList = [];
        var cnt = 0;
        var FielName = '';  //字段名称
        var DataObj;
        //表头
        g_table_cols =
        [
            { field: 'ID', title: '序号', width: 60, fixed: 'left', align: 'center' }
             , { field: 'TT', title: '采集时间', width: 150, align: 'center' }
        ];


        try {
            if (DeviceHistData == null || DeviceHistData.length == 0)//没有数据
            {
                return DeviceTableData;
            }
            else {

                for (var p in DeviceHistData[0]) {//遍历json对象的每个key/value对,p为key

                    //alert(p + " " + DeviceHistData[0][p]);
                    if (p != 'ST' && p != 'TT' && p != 'UT' && p != null) {
                        g_FieldList[cnt] = p; //记录字段
                        FielName = get_field_name(g_AllEssDataCache, p);    //获取字段名称
                        var obj = { field: p, title: FielName, width: ((FielName.length - 1) * 12 + 30), align: 'center' };
                        g_table_cols[2 + cnt] = obj;
                        cnt++;
                    }
                }
                //在最后面添加上传时间
                g_table_cols[2 + cnt] = { field: 'UT', title: '上传时间', width: 150, align: 'center' };


                //alert(JSON.stringify(g_table_cols, 4));        //调试显示信息
                for (var i = 0; i < DeviceHistData.length; i++) {
                    var obj = new Object();                     //定义对象
                    //给对象添加属性
                    obj.ID = (StartRowNumber + i) + '';        //行号，加上起始行号


                    DataObj = DeviceHistData[i];
                    if (DataObj == null) //没有找到，有数据
                    {
                        obj.STATUS = '无数据';  //状态
                    }
                    else {
                        //循环显示普通要素数据
                        for (var j = 0; j < g_FieldList.length; j++) {
                            if (DataObj[g_FieldList[j]] == '-9999.999') //无效值
                            {
                                obj[g_FieldList[j]] = ' ';                    //获取字段年对于的值
                            }
                            else {
                                obj[g_FieldList[j]] = DataObj[g_FieldList[j]];
                            }
                        }
                        obj.TT = DataObj.TT;
                        obj.UT = DataObj.UT;
                    }

                    DeviceTableData[i] = obj;                    //添加对象到数组

                }
            }
        }
        catch (e) {
            layer.alert("处理数据发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }

        //alert(JSON.stringify(DeviceTableData, 4));        //调试显示信息
        return DeviceTableData;
    }

    //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
    function RecordScrollTop() {
        try {
            g_scrollTop.dev_obj = document.getElementById('table_and_page_div_id'); //table的父div
            if (g_scrollTop.dev_obj != null) {
                g_scrollTop.layuitable = g_scrollTop.dev_obj.getElementsByClassName("layui-table-main");
            }
            if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                g_scrollTop.scrollTop = g_scrollTop.layuitable[0].scrollTop; //layuitable获取到的是 class=layui-table-main的集合
            }
        }
        catch (e) {
            g_scrollTop.scrollTop = 0;
            console.log(e.message);
        }
    }

    //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
    function RestoreScrollTop() {
        try {
            //还原scroll位置
            if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                g_scrollTop.layuitable[0].scrollTop = g_scrollTop.scrollTop;
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }

    //初始化要素数据
    function AllDeviceEssInit() {
        var obj = null;
        try {
            obj = parent.Read_AllEssDataCache();    //读取父页面缓存的数据
        }
        catch (e) {

        }
        if (obj == null || obj.length == 0) //缓存无效才从服务器获取
        {
            //alert("ajax获取要素表");
            obj = parent.GetAllEssData();  //获取所有要素数据
            parent.Write_AllEssDataCache(obj);    //写入缓存到父页面
        }

        return obj;
    }

    //获取当前设备的历史数据细信（历史）
    //ST:设备编号；StartTime：开始时间，YYYY-MM-DD hh:mm:ss格式；EndTime：结束时间，YYYY-MM-DD hh:mm:ss格式；isASC：是否为顺序查询；
    function ajax_sync_get_hist_data_count(ST, StartTime, EndTime, isASC) {
        var cnt = 0;

        //alert('请求历史数据信息');
        try {
            //请求服务器
            var jsonData = {
                GetFun: 'GetHistDataInfo',
                ST: ST,
                StartTime: StartTime, //YYYY-MM-DD hh:mm:ss格式
                EndTime: EndTime, //YYYY-MM-DD hh:mm:ss格式
                isASC: isASC,
            };
            //alert('ST_List:'+ST_List);         //调试显示信息

            $.ajax({
                url: '/Home/Index',
                type: 'POST',
                dataType: 'json',
                async: false,                                       //同步执行
                data: jsonData,
            })
            .done(function (response) {
                if (response.rel == 1) { //获取成功
                    //alert(JSON.stringify(response.obj, 4));         //调试显示信息
                    if (response.obj == null)                       //没有数据
                    {

                    }
                    else {
                        cnt = JSON.parse(response.obj);  //转换为对象
                    }
                }
                else if (response.rel == -1) //需要登录
                {
                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                    parent.JumpLogon();
                }
                else {

                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                }
            })
            .fail(function () {
                layer.alert('通信错误，请求数据失败！', { icon: 5, scrollbar: false }); //5：失败；6：成功
            })
        }
        catch (e) {
            layer.alert("发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }


        return cnt;
    }

</script>
   



</body>


</html>

