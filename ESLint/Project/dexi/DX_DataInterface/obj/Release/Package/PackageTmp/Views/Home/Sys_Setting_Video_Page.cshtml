
<!doctype html>
<html lang="en" class="fixed">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>视频管理</title>
    <link rel="apple-touch-icon" sizes="120x120" href="../../helsinki-blue/favicon/apple-icon-120x120.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../helsinki-blue/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../helsinki-blue/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../helsinki-blue/favicon/favicon-16x16.png">
    <link rel="stylesheet" type="text/css" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.4/css/bootstrap.min.css">
    <link href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/animate.css/animate.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/toastr/toastr.min.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/magnific-popup/magnific-popup.css">
    <link rel="stylesheet" href="../../helsinki-blue/stylesheets/css/style.css">
    <link href="../../helsinki-blue/user/H-ui.admin.css" rel="stylesheet" />
    <link rel="stylesheet" href="../../helsinki-blue/vendor/pnotify/pnotify.custom.css">
    <link href="../../helsinki-blue/user/css/bootstrap-user.css" rel="stylesheet" />
    <link href="../../helsinki-blue/user/layui/css/layui.css" rel="stylesheet" />

    <style type="text/css">
        /*INFO 按钮蓝色*/
        .btn-info {
            background-color: #3E79BB;
            border-color: #3E79BB;
        }
        /*INFO 按钮禁用淡蓝色*/
        .btn-info.disabled, .btn-info[disabled] {
            background-color: #88bffc;
            border-color: #88bffc;
        }
        /*表格字体颜色，黑色*/
        .layui-table {
            color: #232323;
        }
    </style>
</head>

<body style="overflow:auto;">
    <!--影藏外部的滑动条-->

    <div class="user_content" , id="user_content_id_1">
        <div class="row animated ">
            <div class="panel" style="height:100%;width:100%;" id="user_panel_id_1">
                <div class="panel-content">
                    <div class="row">
                        <div class="col-sm-12">
                            <h4 class="section-subtitle"><b>视频管理</b>&nbsp;&nbsp;[增加或修改视频信息]<a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_all_count_id">视频总数：0</a><a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_show_count_id">当前显示：0</a>  <a href="#" onclick="RefreshPage_onClick()" class="fa fa-refresh" id="lable_refresh_data_id" style="float:right">刷新数据</a></h4>

                            <form class="form-inline" id="search_form_id_01">
                                <div class="form-group">
                                    <a class="control-label">搜索视频:</a>
                                </div>
                                <div class="form-group">
                                    <input class="form-control" style="height:28px" type="text" id="search_btn_id" placeholder="编号/名称">
                                    <button class="btn btn-info fa fa-search" onclick="search_onclick()" type="button">&nbsp;&nbsp;搜索</button>
                                    <button class="btn btn-info fa fa-remove" onclick="search_cancel_onclick()" type="button" id="cancel_search_button_id">&nbsp;&nbsp;取消搜索</button>
                                    <a>&nbsp;</a>
                                    <button class="btn btn-info fa fa-plus-square-o" onclick="add_video_onclick()" type="button">&nbsp;&nbsp;添加视频</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div style="height:5px">
                        &nbsp;
                    </div>

                    <div class="table-responsive" id="table_and_page_div_id">
                        <!--此处放一个表格-->
                        <table id="video_list_table_id" lay-filter="tabl_lay_filter"></table>
                        <div class="btn-group" style="margin-left: auto;margin-right: auto;" id="limt_butt_id">
                        </div>

                    </div>

                    <script type="text/html" id="tab_tool_bar">
                        <a class="layui-btn layui-btn-xs" style="background-color:#5BC0DE" lay-event="edit">编辑信息</a>
                        <a class="layui-btn layui-btn-xs" lay-event="bind_user">绑定用户</a>
                        <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除视频</a>
                    </script>

                </div>
            </div>

        </div>
    </div>



    <script src="../../helsinki-blue/javascripts/jquery.min.js"></script>
    <script src="../../helsinki-blue/vendor/bootstrap/js/bootstrap.min.js"></script>
    <script src="../../helsinki-blue/vendor/nano-scroller/nano-scroller.js"></script>
    <script src="../../helsinki-blue/javascripts/template-script.min.js"></script>
    <script src="../../helsinki-blue/javascripts/template-init.min.js"></script>
    <script src="../../helsinki-blue/vendor/toastr/toastr.min.js"></script>
    <script src="../../helsinki-blue/vendor/magnific-popup/jquery.magnific-popup.min.js"></script>

    <!-- 相关js -->
    <script src="../../Scripts/md5/md5.js"></script>
    <script src="../../helsinki-blue/vendor/pnotify/pnotify.custom.js"></script>
    <script src="../../helsinki-blue/javascripts/examples/ui-elements/notifications-pnotify.js"></script>
    <script src="../../helsinki-blue/user/js/SetUser.js"></script>
    <script src="../../helsinki-blue/user/js/Public_UserControl.js"></script>
    <script src="../../helsinki-blue/user/layer/layer.js"></script>
    <script src="../../helsinki-blue/user/layui/layui.js"></script>
    <script src="../../helsinki-blue/user/js/PublicDataRequest.js"></script>

    <!-- 弹出message占位 -->
    <div id="message_id"></div>



    <!-- 界面js代码 -->
    <script>
        var g_AllVideoList;                                 //所有视频列表基本数据
        var g_SearchVideoList;                              //符合搜索条件的视频信息
        var g_layer_msg_index;                              //加载框id
        var g_layer_id;                                     //全局新窗口id
        var g_tableIns;                                     //tableIns 来源于 table.render() 方法的实例-用于表格重载
        var g_VideoInfoObj;                                 //当前显示的下载的原始数据
        var g_SelectPageIndex   = 0;                        //当前页索引，从0开始
        var g_VideoInfoDataPage = JSON.parse('[]');         //用于最终显示的视频列表数据，传递给tab-每次获取一页数据,数组
        var cg_OnePageDataCount = 50;                       //一页显示数据条数
        var g_isSearchMode      = false;                    //是否处于搜索模式
        var g_AllUsersDataCache = null;                     //所有用户的基本信息缓存

        //当前正在编辑的视频信息
        var g_ThisEditVideoInfo = {
            isEdit  : true,
            SERIAL  : '',
            NAME    : '',
            URL     : '',
            H5URL   : '',
            ST      : '',
            REMARKS : ''
        };

        //table表格配置
        var g_table_config = {
            elem    : '#video_list_table_id',
            data    : g_VideoInfoDataPage,
            limit   : cg_OnePageDataCount,   //每页显示50条
            text    : { none: '暂无相关数据' },
            height  : 500,
            page    : false, //开启分页
            cols    : [[ //表头
            { field: 'ID', title: '序号', width: 60, fixed: 'left' }, 
            { field: 'NAME', title: '视频名称', width: 240 },
            { field: 'SERIAL', title: '视频编号', width: 100 },
            { field: 'URL', title: 'HLS地址', width: 260 },
            { field: 'H5URL', title: 'H5地址', width: 260 },
            { field: 'ST', title: '设备编号', width: 140 },
            { field: 'REMARKS', title: '备注', width: 180 },
            { fixed: 'right', width: 320, align: 'center', toolbar: '#tab_tool_bar' }
          ]],
            even: true, //开启隔行背景
            size: 'sm' //小尺寸的表格
        };

        //底部分页栏配置
        var g_table_limt = {
            elem: 'limt_butt_id',
            theme: '#3E79BB',                       //主题风格
            count: 0,                               //数总数
            limit: cg_OnePageDataCount,             //单页显示数据条数
            groups: 10,                             //连续出现的页码个数
            curr: (g_SelectPageIndex + 1),          //当前页码
            jump: function (obj, first) {           //分页回调
                table_limt_jump_event(obj, first);  //翻页处理
            },
            layout: ['prev', 'page', 'next', 'count'],
        };
        //用于记录当前滑动条位置
        var g_scrollTop = {
            dev_obj: null,          //layui table 父div
            layuitable: null,       //当前的layui table
            scrollTop: 0            //记录位置
        };

        //初始化加载执行
        window.onload = function () {   //要执行的js代码段
            //自动高度
            var oDiv = document.getElementById('user_panel_id_1');
            oDiv.style.height = ($(window).height() - 40) + 'px';

            $.ajaxSettings.async = false;                       //由于有ajax，强制js为同步执行
            loading_message('加载数据中...');                    //弹出提示框
            g_AllVideoList = ajaxSyncGetVideoInfo();        //获取所有视频基本信息列表

            // 获取第一页要显示的视频详细信息
            g_VideoInfoObj = showOnePageData(g_AllVideoList, 0, cg_OnePageDataCount);

            document.getElementById('lable_all_count_id').innerHTML = '视频总数：' + g_AllVideoList.length;     //显示所有视频数量
            document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + g_VideoInfoObj.length;    //显示当前页显示数量

            g_VideoInfoDataPage = conversion_data_layui_table(g_VideoInfoObj, 1);                             //将获取的数据转换为layui table能显示的数据
            data_table_init(g_VideoInfoDataPage, g_AllVideoList.length, cg_OnePageDataCount, 0);              //初始化表格，并显示数据

            close_message();                                 //关闭提示框

            document.getElementById("cancel_search_button_id").disabled = "true";    //禁用取消搜索按钮
        }

        //刷新当前页面-点击刷新按钮
        function RefreshPage_onClick() {
            location.reload();
        }


        //删除一个视频(会使用ajax请求服务器删除，删除成功后会刷新所有列表)
        function ajax_sync_delete_video(SERIAL) {
            var i = 0;

            try {
                if (SERIAL == null || SERIAL.length == 0) {
                    layer.alert("错误：要删除的视频编号为空！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                    return;
                }
                //先寻找本次要删除的视频，在本地缓存中寻找
                for (i = 0; i < g_AllVideoList.length; i++) {
                    if (g_AllVideoList[i].SERIAL == SERIAL) break;  //找到了
                }
                if (i == g_AllVideoList.length) {
                    layer.alert("错误：没有找到当前要删除的视频，视频编号：" + SERIAL, { icon: 5, scrollbar: false }); //5：失败；6：成功
                    return;
                }

                //找到了，开始使用ajax请求删除视频
                //请求服务器
                var jsonData = {
                    GetFun: 'DeleteVideo',
                    SERIAL: SERIAL,
                };

                $.ajax({
                    url: '/Home/Index',
                    type: 'POST',
                    dataType: 'json',
                    async: false,                    //同步执行
                    data: jsonData,
                })
                .done(function (response) {
                    if (response.rel == 1) {        //获取成功
                        layer.alert('删除视频成功！', { icon: 6, scrollbar: false });          //5：失败；6：成功

                        RefreshVideoData();         //刷新数据
                    }
                    else if (response.rel == -1) {  //需要登录
                        layer.alert(response.msg, { icon: 5, scrollbar: false });           //5：失败；6：成功
                        parent.JumpLogon();
                    }
                    else {
                        layer.alert(response.msg, { icon: 5, scrollbar: false });           //5：失败；6：成功
                    }
                })
                .fail(function () {
                    layer.alert('通信错误，请求数据失败！', { icon: 5, scrollbar: false });     //5：失败；6：成功
                })
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false });             //5：失败；6：成功
            }
        }

        //刷新当前页-用于添加视频后刷新当前页，会重新获取所有视频基础信息，并获取当前页的详细信息，并将界面tabl与底部分页重绘，在子页面调用
        function RefreshVideoData() {
            var LastIndex = g_SelectPageIndex;              //记录之前页码位置
            //alert('之前页码：' + LastIndex);

            $.ajaxSettings.async = false;                   //由于有ajax，强制js为同步执行
            loading_message('加载数据中...');                 //弹出提示框
            g_AllVideoList = ajaxSyncGetVideoInfo();      //获取所有视频基本信息列表

            //限制页码位置
            var PageCnt = Math.ceil(g_AllVideoList.length / cg_OnePageDataCount); //计算总页数，向上取整
            if (PageCnt == 0) {
                LastIndex = 0;
            }
            else {
                if (LastIndex > (PageCnt - 1)) {            //超出范围了，进行限制
                    LastIndex = PageCnt - 1;
                }
            }

            g_VideoInfoObj = showOnePageData(g_AllVideoList, LastIndex * cg_OnePageDataCount, cg_OnePageDataCount);  //获取第当前页要显示的视频详细信息
            g_VideoInfoDataPage = conversion_data_layui_table(g_VideoInfoObj, LastIndex * cg_OnePageDataCount + 1);           //将获取的数据转换为layui table能显示的数据

            document.getElementById('lable_all_count_id').innerHTML = '视频总数：' + g_AllVideoList.length;  //显示所有视频数量
            document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + g_VideoInfoObj.length; //显示当前页显示数量

            // alert('还原页码：' + LastIndex);
            //重载表格
            RecordScrollTop();      //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
            data_table_init(g_VideoInfoDataPage, g_AllVideoList.length, cg_OnePageDataCount, LastIndex);  //初始化表格，并显示数据
            RestoreScrollTop();     //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
            close_message();        //关闭提示框

            g_isSearchMode = false; //不处于搜索模式
            document.getElementById("cancel_search_button_id").disabled = "true";                         //禁用取消搜索按钮
        }

        //关闭新的小窗口
        function CloseLayer() {
            layer.close(g_layer_id);
        }

        //浏览器窗口大小变化事件
        $(window).resize(function () {          //当浏览器大小变化时
            //自动高度
            var oDiv = document.getElementById('user_panel_id_1');
            oDiv.style.height = ($(window).height() - 40) + 'px';

            //表格高度自适应
            data_table_auto_height();           //自动调节表格高度

            layer.full(g_layer_id);             //弹出窗口全屏
        });

        //更新本地缓存的一个视频信息(更新到g_VideoInfoDataPage数据中，由子页面调用)
        function UpdateVideo(SERIAL, NAME, URL, H5URL, ST, REMARKS) {
            
            if (g_VideoInfoDataPage == null || g_VideoInfoDataPage.length == 0) {
                layer.alert("修改本地缓存的视频信息失败，请重新刷新列表1！", { icon: 5, scrollbar: false });         //5：失败；6：成功
            }
            else {


                try {
                    for (var i = 0; i < g_VideoInfoDataPage.length; i++) {

                        if (g_VideoInfoDataPage[i].SERIAL == SERIAL) {
                            g_VideoInfoDataPage[i].NAME     = NAME;
                            g_VideoInfoDataPage[i].URL      = URL;
                            g_VideoInfoDataPage[i].H5URL    = H5URL;
                            g_VideoInfoDataPage[i].ST       = ST;
                            g_VideoInfoDataPage[i].REMARKS  = REMARKS;

                            RecordScrollTop();      //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
                            //刷新当前页
                            table_reload(g_VideoInfoDataPage);      //表格重载
                            RestoreScrollTop();     //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）

                            layer.close(g_layer_msg_index);         //关闭提示框

                            return;
                        }
                    }
                    layer.alert("修改本地缓存的视频信息失败，请重新刷新列表！", { icon: 5, scrollbar: false });      //5：失败；6：成功
                }
                catch (e) {
                    layer.alert("错误：" + e.message, { icon: 5, scrollbar: false });                          //5：失败；6：成功
                }

            }
        }


        //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
        function RecordScrollTop() {
            try {
                g_scrollTop.dev_obj = document.getElementById('table_and_page_div_id'); //table的父div
                if (g_scrollTop.dev_obj != null) {
                    g_scrollTop.layuitable = g_scrollTop.dev_obj.getElementsByClassName("layui-table-main");
                }
                if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                    g_scrollTop.scrollTop = g_scrollTop.layuitable[0].scrollTop;        //layuitable获取到的是 class=layui-table-main的集合
                }
            }
            catch (e) {
                g_scrollTop.scrollTop = 0;
                console.log(e.message);
            }
        }

        //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
        function RestoreScrollTop() {
            try {
                //还原scroll位置
                if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                    g_scrollTop.layuitable[0].scrollTop = g_scrollTop.scrollTop;
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }

        //重载表格
        function table_reload(UserInfoDataPage) {
            try {
                //刷新当前页
                g_table_config.data = UserInfoDataPage;
                g_tableIns.reload(g_table_config);//表格重载
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }

        }

        //表格翻页处理
        function table_limt_jump_event(obj, first) {
            try {
                //obj包含了当前分页的所有参数，比如：
                //console.log(obj.curr); //得到当前页，以便向服务端请求对应页的数据。
                // console.log(obj.limit); //得到每页显示的条数

                //首次不执行
                if (!first) {
                    //alert(obj.curr + " " + obj.limit);

                    //弹出提示框
                    g_layer_msg_index = layer.msg('加载中',
                    {
                        icon: 16
                        , shade: 0.5        //越大界面越黑
                        , time: 60000,      //时间
                        anim: 0,            //平滑放大
                        scrollbar: false    //锁定浏览器滑动
                    });

                    g_SelectPageIndex = obj.curr - 1;   //获取当前页索引


                    if (g_isSearchMode == false) {      //不处于搜索模式
                    
                        g_VideoInfoObj = showOnePageData(g_AllVideoList, g_SelectPageIndex * cg_OnePageDataCount, cg_OnePageDataCount);  //获取第n页要显示的视频详细信息
                    }
                    else {                              //处于搜索模式
                        g_VideoInfoObj = showOnePageData(g_SearchVideoList, g_SelectPageIndex * cg_OnePageDataCount, cg_OnePageDataCount);  //获取第n页要显示的视频详细信息
                    }
                    document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + g_VideoInfoObj.length; //显示当前页显示数量
                    g_VideoInfoDataPage = conversion_data_layui_table(g_VideoInfoObj, g_SelectPageIndex * cg_OnePageDataCount + 1);                //将获取的数据转换为layui table能显示的数据

                    RecordScrollTop();                  //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
                    //刷新当前页
                    table_reload(g_VideoInfoDataPage);  //重载表格
                    layer.close(g_layer_msg_index);     //关闭提示框
                    RestoreScrollTop();                 //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
                }
                else {
                    g_SelectPageIndex = obj.curr - 1;
                }
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }
        }

        //表格工具条按钮处理
        function table_tool_event(obj) {
            var i;
            try {
                //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                var data = obj.data;            //获得当前行数据
                var layEvent = obj.event;       //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
                var tr = obj.tr;                //获得当前行 tr 的DOM对象

                SetEditVideoInfo(data.SERIAL, data.NAME, data.URL, data.H5URL, data.ST, data.REMARKS) //设置当前编辑的视频的基本信息到全局缓冲区，用于子视频调用

                if (layEvent === 'bind_user') {     //绑定用户
                    var title_name = '修改 ' + data.NAME + '(' + data.SERIAL + ') 绑定用户';      //子页面名称

                    //iframe层
                    g_layer_id = layer.open({
                        type: 2,
                        title: 'layer mobile页',
                        //shadeClose: true, //空闲位置关闭
                        fixed: false,       //不固定
                        maxmin: true,
                        shade: 0.5,
                        area: ['852px', '625px'],
                        title: title_name,
                        content: 'EditVideoCancelBindUsersView', //iframe的url
                        skin: 'layui-layer-lan'
                    });
                    layer.full(g_layer_id);  //全屏
                }
                else if (layEvent === 'del') {      //删除
                    layer.confirm('确定删除视频 \'' + data.NAME + '\' 吗？', function (index) {
                        layer.close(index);
                        ajax_sync_delete_video(data.SERIAL);
                    });
                } else if (layEvent === 'edit') {   //编辑
                    //iframe层
                    g_layer_id = layer.open({
                        type: 2,
                        title: 'layer mobile页',
                        //shadeClose: true, //空闲位置关闭
                        fixed: false,       //不固定
                        maxmin: true,
                        shade: 0.5,
                        area: ['802px', '525px'],
                        title: '修改视频信息',
                        content: 'EditVideoInfoView', //iframe的url
                        skin: 'layui-layer-lan'
                    });
                }
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }

        }


        //搜索按钮处理
        function search_onclick() {
            var Keyword = document.getElementById("search_btn_id").value;     //获取搜索框内容
            if (Keyword == null || Keyword.length < 1) {
                layer.alert("错误：搜索内容不能为空！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                return;
            }
            //alert('搜索：' + Keyword);

            g_SearchVideoList = search_user_list(g_AllVideoList, Keyword);    //搜索
            if (g_SearchVideoList.length == 0) return;                       //没有搜索到
            //开始获取搜索的内容，并进行显示
            try {
                g_isSearchMode = true;                      //处于搜索模式
                document.getElementById("cancel_search_button_id").disabled = false;                    //启用取消搜索按钮
                loading_message('加载数据中...');            //弹出提示框
                g_VideoInfoObj = showOnePageData(g_SearchVideoList, 0, cg_OnePageDataCount);   //获取第n页要显示的视频详细信息
                g_VideoInfoDataPage = conversion_data_layui_table(g_VideoInfoObj, 1);          //将获取的数据转换为layui table能显示的数据
                document.getElementById('lable_all_count_id').innerHTML = '搜索视频总数：' + g_SearchVideoList.length;     //显示所有视频数量
                document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + g_VideoInfoObj.length;          //显示当前页显示数量
                //刷新当前页
                table_reload(g_VideoInfoDataPage);       //重载表格
                //刷新底部的分页栏
                table_limt_refresh(g_SearchVideoList.length, cg_OnePageDataCount, 0);
                layer.close(g_layer_msg_index);         //关闭提示框
                if (g_SearchVideoList.length >= 1000) {
                    layer.alert("搜索到超过1000条，只显示" + g_SearchVideoList.length + "条记录，请缩小搜索范围！", { icon: 6, scrollbar: false }); //5：失败；6：成功
                }
                else {
                    layer.alert("搜索到" + g_SearchVideoList.length + "条记录！", { icon: 6, scrollbar: false });  //5：失败；6：成功
                }

            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false });                                 //5：失败；6：成功
            }

        }

        //取消搜索按钮处理
        function search_cancel_onclick() {
            try {
                if (g_isSearchMode == false) return;    //不处于搜索模式的话，直接返回
                g_isSearchMode = false;                 //不处于搜索模式

                document.getElementById('search_btn_id').value = '';

                loading_message('加载数据中...');         //弹出提示框
                g_VideoInfoObj = showOnePageData(g_AllVideoList, 0, cg_OnePageDataCount);              //获取第n页要显示的视频详细信息
                g_VideoInfoDataPage = conversion_data_layui_table(g_VideoInfoObj, 1);                           //将获取的数据转换为layui table能显示的数据
                document.getElementById('lable_all_count_id').innerHTML = '视频总数：' + g_AllVideoList.length;   //显示所有视频数量
                document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + g_VideoInfoObj.length;  //显示当前页显示数量
                //刷新当前页
                table_reload(g_VideoInfoDataPage);       //重载表格
                //刷新底部的分页栏
                table_limt_refresh(g_AllVideoList.length, cg_OnePageDataCount, 0);
                layer.close(g_layer_msg_index);         //关闭提示框

                document.getElementById("cancel_search_button_id").disabled = "true";    //禁用取消搜索按钮
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }
        }

        //设置当前正在编辑的视频信息到全局缓冲区中
        function SetEditVideoInfo(SERIAL, NAME, URL, H5URL, ST, REMARKS) {
            try {
                g_ThisEditVideoInfo.isEdit = true; //编辑状态有效
                g_ThisEditVideoInfo.SERIAL = SERIAL;
                g_ThisEditVideoInfo.NAME = NAME;
                g_ThisEditVideoInfo.URL = URL;
                g_ThisEditVideoInfo.H5URL = H5URL;
                g_ThisEditVideoInfo.ST = ST;
                g_ThisEditVideoInfo.REMARKS = REMARKS;
            }
            catch (e) {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }

        }

        //获取要修改的视频信息-如果isEdit有效则为编辑视频信息；否则为新建视频
        function GetEditVideoInfo() {
            return g_ThisEditVideoInfo;
        }

        //清除编辑状态信息-意味着是新建视频
        function ClearEditUserInfo() {
            g_ThisEditVideoInfo.isEdit = false; //编辑状态无效，需要新建视频
            g_ThisEditVideoInfo.SERIAL = '';
            g_ThisEditVideoInfo.NAME = '';
            g_ThisEditVideoInfo.URL = '';
            g_ThisEditVideoInfo.H5URL = '';
            g_ThisEditVideoInfo.ST = '';
            g_ThisEditVideoInfo.REMARKS = '';
        }

        //添加按钮处理
        function add_video_onclick() {
            ClearEditUserInfo();    //清除修改标记，需要新建
            //iframe层
            g_layer_id = layer.open({
                type: 2,
                title: 'layer mobile页',
                //shadeClose: true, //空闲位置关闭
                fixed: false,       //不固定
                maxmin: true,
                shade: 0.5,
                area: ['802px', '525px'],
                title: '添加新视频',
                content: 'EditVideoInfoView', //iframe的url
                skin: 'layui-layer-lan'
            });
            //layer.full(g_layer_id); //全屏
        }

        //刷新底部分页栏(AllDataCount:总的数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始,无需修改的参数可以为null)
        function table_limt_refresh(AllDataCount, OnePageCount, ThisPageIndex) {
            //刷新底部的分页栏
            layui.use('laypage', function () {
                var laypage = layui.laypage;
                //执行一个laypage实例-设置分页
                if (AllDataCount != null) {
                    g_table_limt.count = AllDataCount;          //数总数
                }
                if (OnePageCount != null) {
                    g_table_limt.limit = OnePageCount;          //单页显示数据条数
                }
                if (ThisPageIndex != null) {
                    g_table_limt.curr = ThisPageIndex + 1;      //当前页
                }
                laypage.render(g_table_limt);                   //重新刷新底部分页
            });
        }

        //表格高度自动调节（要在表格初始化之后进行调用）
        function data_table_auto_height() {
            //表格高度自适应
            if (g_tableIns != null) {
                g_table_config.height = $(window).height() - 200;
                g_tableIns.reload(g_table_config);              //表格重载
            }
        }

        //初始化表格(只能调用一次，并且会在调用后延时一段时间才能初始化完成)DataTableObj:当前要显示的数据；AllDataCount：总数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始
        function data_table_init(DataTableObj, AllDataCount, OnePageCount, ThisPageIndex) {
            layui.use('table', function () {
                var table1 = layui.table;
                //第一个实例
                g_table_config.data = DataTableObj;
                g_tableIns = table1.render(g_table_config);

                //监听工具条
                table1.on('tool(tabl_lay_filter)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                    table_tool_event(obj);                          //调用工具栏事件处理函数
                });
                data_table_auto_height();                           //自动调节表格高度
            });

            //刷新底部的分页栏
            table_limt_refresh(AllDataCount, OnePageCount, ThisPageIndex);
        }

    
        //获取一页视频的详细数据VideoListObj:视频基础信息列表；StartIndex：开始索引，0开始；Count：要读取的数量
        function showOnePageData(VideoListObj, StartIndex, Count) {
            var cnt = 0;
            var obj = [];
            var showNum = 0;    // 要加载最多的索引

            try {
                if (VideoListObj == null || VideoListObj.length == 0 || Count == 0) {
                    layer.alert("要获取的视频列表为空！", { icon: 5, scrollbar: false });      //5：失败；6：成功

                    return obj;
                }

                if (StartIndex >= VideoListObj.length) StartIndex = VideoListObj.length - 1;  //限制

                // 不是最后一页
                if (VideoListObj.length - StartIndex >= Count) {
                    showNum = StartIndex+Count;
                }
                // 最后一页
                else {
                    showNum = StartIndex+(VideoListObj.length%Count);
                }

                //准备好要显示的视频
                for (var i = StartIndex; i < showNum; i++) {
                    obj[cnt++] = VideoListObj[i];
                }
            }
            catch (e) {
                layer.alert("发生了错误：" + e.message, { icon: 5, scrollbar: false });       //5：失败；6：成功
            }
            return obj;
        }

        //将获取到的视频数据转换为能被layui table显示的数据 VideoInfoObj:需要显示的详细视频信息,StartRowNumber:当前显示的行号起始，从1开始；
        function conversion_data_layui_table(VideoInfoObj, StartRowNumber) {
            var VideoTableData = JSON.parse('[]');                      //清空数据，创建一个对象数组

            try {
                if (VideoInfoObj == null || VideoInfoObj.length == 0) { //没有数据
                    return VideoTableData;
                }
                else {
                    for (var i = 0; i < VideoInfoObj.length; i++) {
                        var obj = new Object();                         //定义对象
                        //给对象添加属性
                        obj.ID      = (StartRowNumber + i) + '';             //行号，加上起始行号
                        obj.SERIAL  = '0000' + VideoInfoObj[i].SERIAL;
                        obj.NAME    = VideoInfoObj[i].NAME;
                        obj.URL     = VideoInfoObj[i].URL;
                        obj.H5URL   = VideoInfoObj[i].H5URL;
                        obj.ST      = VideoInfoObj[i].ST;
                        obj.REMARKS = VideoInfoObj[i].REMARKS;

                        VideoTableData[i] = obj;                       //添加对象到数组
                    }
                }
            }
            catch (e) {
                layer.alert("处理数据发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }

            return VideoTableData;
        }

        //搜索符合条件的视频基础信息列表(VideoListObj:所有的视频基础信息列表；Keyword:搜索关键字，视频名与昵称）
        function search_user_list(VideoListObj, Keyword) {
            var obj = JSON.parse('[]');
            var count = 0;

            if (VideoListObj == null || VideoListObj.length == 0) {
                layer.msg("错误：列表为空，无法搜索！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                return obj;
            }
            if (Keyword == null || Keyword.length == 0) {
                layer.msg("错误：请输入搜索关键字！", { icon: 5, scrollbar: false });   //5：失败；6：成功
                return obj;
            }

            try {
                //搜索
                for (var i = 0; i < VideoListObj.length; i++) {
                    if ((VideoListObj[i].NAME.indexOf(Keyword) >= 0) || (VideoListObj[i].NAME.indexOf(Keyword) >= 0)) {
                        obj[count++] = VideoListObj[i];  //找到了
                        if (count >= 1000) {
                            layer.msg("搜索到超过1000个满足条件的数据，提前结束搜索，请修改搜索条件缩小范围！", { icon: 6, scrollbar: false }); //5：失败；6：成功
                            break;
                        }
                    }
                }
                if (count == 0) {                       //没有搜索到满足条件的数据
                    layer.msg("没有搜索到满足条件的视频数据！", { icon: 5, scrollbar: false });    //5：失败；6：成功
                }
            }
            catch (e) {
                layer.msg("搜索发生了错误：" + e.message, { icon: 5, scrollbar: false });        //5：失败；6：成功
            }

            return obj;
        }

        //读取所有用户基本信息缓存
        function Read_AllUsersDataCache() {
            return g_AllUsersDataCache;
        }

        //写入所有用户基本信息缓存
        function Write_AllUsersDataCache(AllUsersData) {
            g_AllUsersDataCache = AllUsersData;
        }


        //更新下载的原始数据中的要素信息-编辑要素数据子页面调用,更新到 g_VideoInfoObj
        function update_ess_data(SERIAL, REAL_ESS) {
            try {
                for (var i = 0; i < g_VideoInfoObj.length; i++) {
                    if (g_VideoInfoObj[i].SERIAL == SERIAL) {   //找到了，更新ESS
                        g_VideoInfoObj[i].REAL_ESS = REAL_ESS;
                        break;
                    }
                }
            }
            catch (e) {
                console.log(e);
            }
        }

        //弹出加载框
        function loading_message(str) {
            g_layer_msg_index = layer.msg('加载中', {
                icon: 16,
                shade: 0.5,         //越大界面越黑
                time: 60000,        //时间
                anim: 0,            //平滑放大
                scrollbar: false    //锁定浏览器滑动
            });
        }

        //关闭所有弹出
        function close_message() {
            layer.close(g_layer_msg_index);         //关闭提示框
        }

        //跳转到登录界面
        function JumpLogon() {
            parent.JumpLogon();
        }

    </script>

</body>


</html>
