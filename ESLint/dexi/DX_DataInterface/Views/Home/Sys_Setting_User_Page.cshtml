
<!doctype html>
<html lang="en" class="fixed">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>用户管理</title>
    <link rel="apple-touch-icon" sizes="120x120" href="../../helsinki-blue/favicon/apple-icon-120x120.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../../helsinki-blue/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../../helsinki-blue/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../../helsinki-blue/favicon/favicon-16x16.png">
    <link rel="stylesheet" type="text/css" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.4/css/bootstrap.min.css">
    <link href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/animate.css/animate.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/toastr/toastr.min.css">
    <link rel="stylesheet" href="../../helsinki-blue/vendor/magnific-popup/magnific-popup.css">
    <link rel="stylesheet" href="../../helsinki-blue/stylesheets/css/style.css">
    <link href="../../helsinki-blue/user/H-ui.admin.css" rel="stylesheet" />
    <link rel="stylesheet" href="../../helsinki-blue/vendor/pnotify/pnotify.custom.css">
    <link href="../../helsinki-blue/user/css/bootstrap-user.css" rel="stylesheet" />
    <link href="../../helsinki-blue/user/layui/css/layui.css" rel="stylesheet" />

     <style type="text/css">
        /*INFO 按钮蓝色*/
       .btn-info
        {
            background-color: #3E79BB;
            border-color: #3E79BB;
        } 
       /*INFO 按钮禁用淡蓝色*/
       .btn-info.disabled, .btn-info[disabled] {
            background-color: #88bffc;
            border-color: #88bffc;
        }
        /*表格字体颜色，黑色*/
       .layui-table {
            color: #232323;
        }
</style>
</head>

<body style= "overflow:auto;"> <!--影藏外部的滑动条-->

    <div class="user_content" , id="user_content_id_1">
        <div class="row animated ">
            <div class="panel" style="height:100%;width:100%;" id="user_panel_id_1" >
                <div class="panel-content">
                    <div class="row">
                       <div class="col-sm-12">
                         <h4 class="section-subtitle"><b>用户管理</b>&nbsp;&nbsp;[增加或修改用户信息]<a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_all_count_id">用户总数：0</a><a>&nbsp;&nbsp;&nbsp;&nbsp;</a><a id="lable_show_count_id">当前显示：0</a>  <a href="#" onclick="RefreshPage_onClick()" class="fa fa-refresh" id="lable_refresh_data_id" style="float:right">刷新数据</a></h4>

                        

                            <form class="form-inline" id="search_form_id_01">                                                                   
                                <div class="form-group">
                                    <a  class="control-label">搜索用户:</a> 
                                </div>
                                <div class="form-group">
                                    <input class="form-control" style="height:28px" type="text" id="search_user_name_id" placeholder="用户名/昵称">
                                    <button  class="btn btn-info fa fa-search" onclick="search_name_onclick()" type="button">&nbsp;&nbsp;搜索</button>
                                    <button  class="btn btn-info fa fa-remove" onclick="search_cancel_onclick()" type="button" id="cancel_search_button_id">&nbsp;&nbsp;取消搜索</button>
                                    <a>&nbsp;</a>
                                    <button class="btn btn-info fa fa-plus-square-o" onclick="add_user_onclick()" type="button" >&nbsp;&nbsp;添加用户</button>
                                </div>
                                
                            </form>
                         </div>
                       </div>
                       <div style="height:5px">
                           &nbsp;
                       </div >

                       <div class="table-responsive" id="table_and_page_div_id" >
                            <!--此处放一个用户表格-->
                            <table id="user_list_table_id" lay-filter="tabl_lay_filter"></table>
                            <div class="btn-group" style="margin-left: auto;margin-right: auto;" id="limt_butt_id">
                            </div>

                      </div>

                       <script type="text/html" id="tab_tool_bar">
                              <a class="layui-btn layui-btn-primary layui-btn-xs" lay-event="detail">查看信息</a>
                              <a class="layui-btn layui-btn-xs" style="background-color:#5BC0DE"  lay-event="edit">编辑信息</a>
                              <a class="layui-btn layui-btn-xs"lay-event="bind_device">绑定设备</a>
                              <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除用户</a>
                       </script>

                </div>
            </div>
      

        </div>
    </div>





<script src="../../helsinki-blue/javascripts/jquery.min.js"></script>
<script src="../../helsinki-blue/vendor/bootstrap/js/bootstrap.min.js"></script>
<script src="../../helsinki-blue/vendor/nano-scroller/nano-scroller.js"></script>
<script src="../../helsinki-blue/javascripts/template-script.min.js"></script>
<script src="../../helsinki-blue/javascripts/template-init.min.js"></script>
<script src="../../helsinki-blue/vendor/toastr/toastr.min.js"></script>
<script src="../../helsinki-blue/vendor/magnific-popup/jquery.magnific-popup.min.js"></script>
    
<!-- 相关js -->
<script src="../../Scripts/md5/md5.js"></script>
<script src="../../helsinki-blue/vendor/pnotify/pnotify.custom.js"></script>
<script src="../../helsinki-blue/javascripts/examples/ui-elements/notifications-pnotify.js"></script>
<script src="../../helsinki-blue/user/js/SetUser.js"></script>
<script src="../../helsinki-blue/user/js/Public_UserControl.js"></script>
<script src="../../helsinki-blue/user/layer/layer.js"></script>
<script src="../../helsinki-blue/user/layui/layui.js"></script>

<!-- 弹出message占位 -->
<div id="message_id"></div>


    
<!-- 界面js代码 -->
<script type="text/javascript">
    var g_AllUserList;                                  //所有用户列表基本数据
    var g_SearchUserList;                               //符合搜索条件的用户信息
    var g_UserInfoDataPage = JSON.parse('[]');          //用于最终显示的用户列表数据，传递给tab-每次获取一页数据,数组
    var g_SelectPageIndex = 0;                          //当前页索引，从0开始
    var cg_OnePageDataCount = 50;                       //一页显示数据条数
    var g_layer_msg_index;                              //加载框id
    var g_layer_id;                                     //全局新窗口id
    var g_tableIns;                                     //tableIns 来源于 table.render() 方法的实例-用于表格重载
    var g_isSearchMode = false;                         //是否处于搜索模式
    var g_AllDeviceDataCache = null;                    //用户缓存子页面 所有设备基本信息
    //当前正在编辑的用户信息
    var g_ThisEditUserInfo = {
        isEdit: true,
        USER: '',
        NICK_NAME: '',
        COMPANY: '',
        TEL: '',
        EMAIL: '',
        PASSWORD:'',
        REMARKS: '',
    };

    //table表格配置
    var g_table_config = {
        elem: '#user_list_table_id'
        , data: g_UserInfoDataPage
        , limit: cg_OnePageDataCount   //每页显示50条
        , text: { none: '暂无相关数据' }
        , height: 500
      , page: false //开启分页
      , cols: [[ //表头
        { field: 'ID', title: '序号', width: 80, fixed: 'left' } //80
        , { field: 'USER', title: '用户名', width: 160 }//160
        , { field: 'NICK_NAME', title: '昵称', width: 240 }//240
        , { field: 'COMPANY', title: '公司', width: 210 }//210
        , { field: 'TEL', title: '电话', width: 140 }//140
        , { field: 'EMAIL', title: '邮箱', width: 170 }//170
        , { field: 'REMARKS', title: '备注', width: 250 }//250
        , { fixed: 'right', width: 330, align: 'center', toolbar: '#tab_tool_bar' }
      ]]
        , even: true //开启隔行背景
        , size: 'sm' //小尺寸的表格
    };

    //底部分页栏配置
    var g_table_limt = {
        elem: 'limt_butt_id',
        theme: '#3E79BB',                   //主题风格
        count: 0,              //数总数
        limit: cg_OnePageDataCount,         //单页显示数据条数
        groups: 10,      //连续出现的页码个数
        curr:(g_SelectPageIndex+1),             //当前页码
        jump: function (obj, first) {//分页回调
            table_limt_jump_event(obj, first);  //翻页处理
        },
        layout: ['prev', 'page', 'next', 'count'],
    };
    //用于记录当前滑动条位置
    var g_scrollTop = {
        dev_obj: null,          //layui table 父div
        layuitable: null,       //当前的layui table
        scrollTop: 0            //记录位置
    };

    //初始化加载执行
    window.onload = function () {   //要执行的js代码段  
        var UserInfoObj;
        
        //自动高度
        var oDiv = document.getElementById('user_panel_id_1');
        oDiv.style.height = ($(window).height() - 40) + 'px';

        $.ajaxSettings.async = false;              //由于有ajax，强制js为同步执行
        loading_message('加载数据中...');            //弹出提示框
        g_AllUserList = ajax_sync_get_all_list();   //获取所有用户基本信息列表
        UserInfoObj = ajax_sync_get_user_data(g_AllUserList, 0, cg_OnePageDataCount);       //获取第一页要显示的用户详细信息

        document.getElementById('lable_all_count_id').innerHTML = '用户总数：' + g_AllUserList.length; //显示所有用户数量
        document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + UserInfoObj.length; //显示当前页显示数量

        g_UserInfoDataPage = conversion_data_layui_table(UserInfoObj, 1);                   //将获取的数据转换为layui table能显示的数据
        data_table_init(g_UserInfoDataPage, g_AllUserList.length, cg_OnePageDataCount, 0);  //初始化表格，并显示数据
        
        close_message();                                    //关闭提示框 

        document.getElementById("cancel_search_button_id").disabled = "true";    //禁用取消搜索按钮
    }

    //刷新当前页面-点击刷新按钮
    function RefreshPage_onClick()
    {
        location.reload();
    }


    //删除一个用户(会使用ajax请求服务器删除，删除成功后会刷新所有列表)
    function ajax_sync_delete_user(USER)
    {
        var i = 0;
        

        try
        {
            if (USER == null || USER.length == 0)
            {
                layer.alert("错误：要删除的用户名为空！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                return;
            }
            //先寻找本次要删除的用户，在本地缓存中寻找
            for(i = 0;i < g_UserInfoDataPage.length;i ++)
            {
                if (g_UserInfoDataPage[i].USER == USER) break;  //找到了
            }
            if(i == g_UserInfoDataPage.length)
            {
                layer.alert("错误：没有找到当前要删除的用户，用户名：" + USER, { icon: 5, scrollbar: false }); //5：失败；6：成功
                return;
            }

            //找到了，开始使用ajax请求删除用户
            //请求服务器进行登录
            var jsonData = {
                GetFun: 'DeleteUsers',
                USER: USER,
            };


            $.ajax({
                url: '/Home/Index',
                type: 'POST',
                dataType: 'json',
                async: false,                                       //同步执行
                data: jsonData,
            })
            .done(function (response) {
                if (response.rel == 1) { //获取成功
                    layer.alert('删除用户成功！', { icon: 6, scrollbar: false }); //5：失败；6：成功
                   
                    RefreshUserData(); //刷新数据
                }
                else if (response.rel == -1) //需要登录
                {
                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                    parent.JumpLogon();
                }
                else {

                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                }
            })
            .fail(function () {
                layer.alert('通信错误，请求数据失败！', { icon: 5, scrollbar: false }); //5：失败；6：成功
            })
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //刷新当前页-用于添加用户后刷新当前页，会重新获取所有用户基础信息，并获取当前页的详细信息，并将界面tabl与底部分页重绘，在子页面调用
    function RefreshUserData()
    {
        var LastIndex = g_SelectPageIndex;          //记录之前页码位置
        //alert('之前页码：' + LastIndex);

        $.ajaxSettings.async = false;              //由于有ajax，强制js为同步执行
        loading_message('加载数据中...');            //弹出提示框
        g_AllUserList = ajax_sync_get_all_list();   //获取所有用户基本信息列表
        
        //限制页码位置
        var PageCnt = Math.ceil(g_AllUserList.length / cg_OnePageDataCount); //计算总页数，向上取整
        if (PageCnt == 0) {
            LastIndex = 0;
        }
        else
        {
            if (LastIndex > (PageCnt - 1)) //超出范围了，进行限制
            {
                LastIndex = PageCnt - 1;
            }

        }

        UserInfoObj = ajax_sync_get_user_data(g_AllUserList, LastIndex * cg_OnePageDataCount, cg_OnePageDataCount);       //获取第当前页要显示的用户详细信息

        document.getElementById('lable_all_count_id').innerHTML = '用户总数：' + g_AllUserList.length; //显示所有用户数量
        document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + UserInfoObj.length; //显示当前页显示数量


        g_UserInfoDataPage = conversion_data_layui_table(UserInfoObj, LastIndex * cg_OnePageDataCount+1);  //将获取的数据转换为layui table能显示的数据

       
       // alert('还原页码：' + LastIndex);
        //重载表格
        RecordScrollTop();                                                          //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
        data_table_init(g_UserInfoDataPage, g_AllUserList.length, cg_OnePageDataCount, LastIndex);  //初始化表格，并显示数据
        RestoreScrollTop();                                                         //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
        close_message();                                                            //关闭提示框     

        g_isSearchMode = false;                                                     //不处于搜索模式
        document.getElementById("cancel_search_button_id").disabled = "true";       //禁用取消搜索按钮
    }


    //关闭新的小窗口
    function CloseLayer()
    {
        layer.close(g_layer_id);
    }

    //浏览器窗口大小变化事件
    $(window).resize(function () {          //当浏览器大小变化时
        //自动高度
        var oDiv = document.getElementById('user_panel_id_1');
        oDiv.style.height = ($(window).height() - 40) + 'px';

        //表格高度自适应
        data_table_auto_height();                           //自动调节表格高度
        layer.full(g_layer_id);             //弹出窗口全屏
    });


    //更新本地缓存的一个用户信息(更新到g_UserInfoDataPage数据中，由子页面调用)
    function UpdateUser(USER,NICK_NAME,COMPANY,TEL,EMAIL,PASSWORD,REMARKS)
    {
        if (g_UserInfoDataPage == null || g_UserInfoDataPage.length == 0)
        {
            layer.alert("修改本地缓存的用户信息失败，请重新刷新列表！", { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
        else
        {
            try
            {
                for (var i = 0; i < g_UserInfoDataPage.length; i++)
                {
                    if (g_UserInfoDataPage[i].USER == USER)
                    {
                        g_UserInfoDataPage[i].NICK_NAME = NICK_NAME;
                        g_UserInfoDataPage[i].COMPANY = COMPANY;
                        g_UserInfoDataPage[i].TEL = TEL;
                        g_UserInfoDataPage[i].EMAIL = EMAIL;
                        g_UserInfoDataPage[i].PASSWORD = PASSWORD;
                        g_UserInfoDataPage[i].REMARKS = REMARKS;


                        RecordScrollTop();      //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
                        //刷新当前页
                        table_reload(g_UserInfoDataPage);//表格重载
                        RestoreScrollTop();      //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）

                        layer.close(g_layer_msg_index);      //关闭提示框

                        return;
                    }
                }
                layer.alert("修改本地缓存的用户信息失败，请重新刷新列表！", { icon: 5, scrollbar: false }); //5：失败；6：成功
            }
            catch (e)
            {
                layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
            }
            
        }
    }

   
    //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
    function RecordScrollTop()
    {
        try
        {
            g_scrollTop.dev_obj = document.getElementById('table_and_page_div_id'); //table的父div
            if (g_scrollTop.dev_obj != null) {
                g_scrollTop.layuitable = g_scrollTop.dev_obj.getElementsByClassName("layui-table-main");
            }
            if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                g_scrollTop.scrollTop = g_scrollTop.layuitable[0].scrollTop; //layuitable获取到的是 class=layui-table-main的集合
            }
        }
        catch (e)
        {
            g_scrollTop.scrollTop = 0;
            console.log(e.message);
        }   
    }
   
    //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
    function RestoreScrollTop()
    {
        try {
            //还原scroll位置
            if (g_scrollTop.layuitable != null && g_scrollTop.layuitable.length > 0) {
                g_scrollTop.layuitable[0].scrollTop = g_scrollTop.scrollTop;
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }
    
    //重载表格
    function table_reload(UserInfoDataPage)
    {
        try
        {
            //刷新当前页
            g_table_config.data = UserInfoDataPage;
            g_tableIns.reload(g_table_config);//表格重载
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
       
    }

    //表格翻页处理
    function table_limt_jump_event(obj, first)
    {
        try
        {
            //obj包含了当前分页的所有参数，比如：
            //console.log(obj.curr); //得到当前页，以便向服务端请求对应页的数据。
            // console.log(obj.limit); //得到每页显示的条数

            //首次不执行
            if (!first) {
                //alert(obj.curr + " " + obj.limit);

                //弹出提示框
                g_layer_msg_index = layer.msg('加载中',
                {
                    icon: 16
                    , shade: 0.5 //越大界面越黑
                    , time: 60000,//时间
                    anim: 0, //平滑放大
                    scrollbar: false//锁定浏览器滑动
                });

                g_SelectPageIndex = obj.curr - 1;   //获取当前页索引

                var UserInfoObj;
                if (g_isSearchMode == false)  //不处于搜索模式
                {
                    UserInfoObj = ajax_sync_get_user_data(g_AllUserList, g_SelectPageIndex * cg_OnePageDataCount, cg_OnePageDataCount);  //获取第n页要显示的用户详细信息
                }
                else //处于搜索模式
                {
                    UserInfoObj = ajax_sync_get_user_data(g_SearchUserList, g_SelectPageIndex * cg_OnePageDataCount, cg_OnePageDataCount);  //获取第n页要显示的用户详细信息
                }
                document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + UserInfoObj.length; //显示当前页显示数量
                g_UserInfoDataPage = conversion_data_layui_table(UserInfoObj, g_SelectPageIndex * cg_OnePageDataCount+1);                //将获取的数据转换为layui table能显示的数据

                
                RecordScrollTop();      //记录scrollTop位置，在表格重载之前调用（依赖全局g_scrollTop）
                //刷新当前页
                table_reload(g_UserInfoDataPage);       //重载表格
                layer.close(g_layer_msg_index);      //关闭提示框
                RestoreScrollTop();      //还原scrollTop位置，在表格重载之后调用（依赖全局g_scrollTop）
            }
            else {
                g_SelectPageIndex = obj.curr - 1;
            }
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //表格工具条按钮处理
    function table_tool_event(obj)
    {
        try
        {
            //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            var data = obj.data; //获得当前行数据
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            var tr = obj.tr; //获得当前行 tr 的DOM对象

            if (layEvent === 'detail') { //查看

                var info = '用户名称：' + data.USER + '</br>用户昵称：' + data.NICK_NAME + '</br>公司信息：' + data.COMPANY + '</br>联系电话：' + data.TEL + '</br>联系邮箱：' + data.EMAIL + '</br>&nbsp;&nbsp;&nbsp;&nbsp;备&nbsp;&nbsp;&nbsp;注：' + data.REMARKS;
                g_layer_id = layer.alert(info, {
                    skin: 'layui-layer-lan'
                        , closeBtn: 0

                        , title: '详细信息'
                        , area: ['500px', '350px'],
                });

            } else if (layEvent === 'del') { //删除
                layer.confirm('确定删除用户\'' + data.USER+'\'吗？', function (index) {
                    layer.close(index);
                    ajax_sync_delete_user(data.USER);
                });
            } else if (layEvent === 'edit') { //编辑
                SetEditUserInfo(data.USER, data.NICK_NAME, data.COMPANY, data.TEL, data.EMAIL, data.REMARKS);//设置编辑用户信息
                //iframe层
                g_layer_id = layer.open({
                    type: 2,
                    title: 'layer mobile页',
                    //shadeClose: true, //空闲位置关闭
                    fixed: false, //不固定
                    maxmin: true,
                    shade: 0.5,
                    area: ['802px', '570px'],
                    title: '修改用户信息',
                    content: 'EditUserInfoView', //iframe的url
                    skin: 'layui-layer-lan'
                });
            }
            else if (layEvent === 'bind_device') { //绑定设备
                var title_name = '修改 ' + data.USER +  ' 绑定设备'; //子页面名称

                SetEditUserInfo(data.USER, data.NICK_NAME, data.COMPANY, data.TEL, data.EMAIL, data.REMARKS);//设置编辑用户信息
                //iframe层
                g_layer_id = layer.open({
                    type: 2,
                    title: 'layer mobile页',
                    //shadeClose: true, //空闲位置关闭
                    fixed: false, //不固定
                    maxmin: true,
                    shade: 0.5,
                    area: ['852px', '625px'],
                    title: title_name,
                    content: 'EditUserCancelBindDeviceView', //iframe的url
                    skin: 'layui-layer-lan'
                });
                layer.full(g_layer_id); //全屏
            }
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
        

    }


    //搜索按钮处理
    function search_name_onclick()
    {
        var Keyword = document.getElementById("search_user_name_id").value; //获取搜索框内容
        if (Keyword == null || Keyword.length < 1)
        {
            layer.alert("错误：搜索内容不能为空！", { icon: 5, scrollbar: false }); //5：失败；6：成功
            return;
        }
        //alert('搜索：' + Keyword);

        g_SearchUserList = search_user_list(g_AllUserList, Keyword);    //搜索
        if (g_SearchUserList.length == 0) return;                       //没有搜索到
        //开始获取搜索的内容，并进行显示
        try
        {
            g_isSearchMode = true;  //处于搜索模式
            document.getElementById("cancel_search_button_id").disabled = false;    //启用取消搜索按钮
            loading_message('加载数据中...');            //弹出提示框
            var UserInfoObj = ajax_sync_get_user_data(g_SearchUserList, 0, cg_OnePageDataCount);        //获取第n页要显示的用户详细信息
            document.getElementById('lable_all_count_id').innerHTML = '搜索用户总数：' + g_SearchUserList.length; //显示所有用户数量
            document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + UserInfoObj.length; //显示当前页显示数量
            g_UserInfoDataPage = conversion_data_layui_table(UserInfoObj, 1);                //将获取的数据转换为layui table能显示的数据
            //刷新当前页
            table_reload(g_UserInfoDataPage);       //重载表格
            //刷新底部的分页栏
            table_limt_refresh(g_SearchUserList.length, cg_OnePageDataCount, 0);
            layer.close(g_layer_msg_index);         //关闭提示框
            if (g_SearchUserList.length >= 1000) {
                layer.alert("搜索到超过1000条，只显示" + g_SearchUserList.length + "条记录，请缩小搜索范围！", { icon: 6, scrollbar: false }); //5：失败；6：成功
            }
            else {
                layer.alert("搜索到" + g_SearchUserList.length + "条记录！", { icon: 6, scrollbar: false }); //5：失败；6：成功
            }
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
        


    }
    //取消搜索按钮处理
    function search_cancel_onclick()
    {
        try
        {
            if (g_isSearchMode == false) return;    //不处于搜索模式的话，直接返回
            g_isSearchMode = false;                 //不处于搜索模式

            loading_message('加载数据中...');            //弹出提示框
            var UserInfoObj = ajax_sync_get_user_data(g_AllUserList, 0, cg_OnePageDataCount);        //获取第n页要显示的用户详细信息
            document.getElementById('lable_all_count_id').innerHTML = '用户总数：' + g_AllUserList.length; //显示所有用户数量
            document.getElementById('lable_show_count_id').innerHTML = '当前显示：' + UserInfoObj.length; //显示当前页显示数量
            g_UserInfoDataPage = conversion_data_layui_table(UserInfoObj, 1);                //将获取的数据转换为layui table能显示的数据
            //刷新当前页
            table_reload(g_UserInfoDataPage);       //重载表格
            //刷新底部的分页栏
            table_limt_refresh(g_AllUserList.length, cg_OnePageDataCount, 0);
            layer.close(g_layer_msg_index);         //关闭提示框

            document.getElementById("cancel_search_button_id").disabled = "true";    //禁用取消搜索按钮
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
    }

    //设置当前正在编辑的用户信息到全局缓冲区中
    function SetEditUserInfo(USER, NICK_NAME, COMPANY, TEL, EMAIL, REMARKS) {
        try
        {
            g_ThisEditUserInfo.isEdit = true; //编辑状态有效
            g_ThisEditUserInfo.USER = USER;
            g_ThisEditUserInfo.NICK_NAME = NICK_NAME;
            g_ThisEditUserInfo.COMPANY = COMPANY;
            g_ThisEditUserInfo.TEL = TEL;
            g_ThisEditUserInfo.EMAIL = EMAIL;
            g_ThisEditUserInfo.REMARKS = REMARKS;
            //从原始的数据中获取密码信息
            g_ThisEditUserInfo.PASSWORD = '';   //先清除密码
            if (g_UserInfoDataPage == null) return; //信息出错
            for (var i = 0; i < g_UserInfoDataPage.length; i++) {
                //循环查找当前的USER
                if (g_UserInfoDataPage[i].USER == USER) //找到了
                {
                    g_ThisEditUserInfo.PASSWORD = g_UserInfoDataPage[i].PASSWORD;
                    break;
                }
            }
        }
        catch (e)
        {
            layer.alert("错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
       
    }

    //获取要修改的用户信息-如果isEdit有效则为编辑用户信息；否则为新建用户
    function GetEditUserInfo() {
        return g_ThisEditUserInfo;
    }

    //清除编辑状态信息-意味着是新建用户
    function ClearEditUserInfo() {
        g_ThisEditUserInfo.isEdit = false; //编辑状态无效，需要新建用户
        g_ThisEditUserInfo.USER = '';
        g_ThisEditUserInfo.NICK_NAME = '';
        g_ThisEditUserInfo.COMPANY = '';
        g_ThisEditUserInfo.TEL = '';
        g_ThisEditUserInfo.EMAIL = '';
        g_ThisEditUserInfo.REMARKS = '';
        g_ThisEditUserInfo.PASSWORD = '';
    }

    //添加用户按钮处理
    function add_user_onclick() {
        ClearEditUserInfo();    //清除修改用户标记，需要新建用户
        //iframe层
        g_layer_id = layer.open({
            type: 2,
            title: 'layer mobile页',
            //shadeClose: true, //空闲位置关闭
            fixed: false, //不固定
            maxmin: true,
            shade: 0.5,
            area: ['802px', '570px'],
            title: '添加新用户',
            content: 'EditUserInfoView', //iframe的url
            skin: 'layui-layer-lan'
        });
    }

    //刷新底部分页栏(AllDataCount:总的数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始,无需修改的参数可以为null)
    function table_limt_refresh(AllDataCount, OnePageCount, ThisPageIndex)
    {
        //刷新底部的分页栏
        layui.use('laypage', function () {
            var laypage = layui.laypage;
            //执行一个laypage实例-设置分页
            if (AllDataCount != null)
            {
                g_table_limt.count = AllDataCount;          //数总数
            }
            if (OnePageCount != null)
            {
                g_table_limt.limit = OnePageCount;          //单页显示数据条数
            }            
            if (ThisPageIndex != null)
            {
                g_table_limt.curr = ThisPageIndex + 1;      //当前页
            }
            laypage.render(g_table_limt);                   //重新刷新底部分页
        });
    }

    //表格高度自动调节（要在表格初始化之后进行调用）
    function data_table_auto_height()
    {
        //表格高度自适应
        if (g_tableIns != null) {
            g_table_config.height = $(window).height() - 200;
            g_tableIns.reload(g_table_config);              //表格重载
        }
    }

    //初始化表格(只能调用一次，并且会在调用后延时一段时间才能初始化完成)DataTableObj:当前要显示的数据；AllDataCount：总数据条数；OnePageCount：一页显示的数据条数；ThisPageIndex：当前页索引，从0开始
    function data_table_init(DataTableObj, AllDataCount, OnePageCount, ThisPageIndex)
    {
        layui.use('table', function () {
            var table1 = layui.table;
            //第一个实例
            g_table_config.data = DataTableObj;
            g_tableIns = table1.render(g_table_config);

            //监听工具条
            table1.on('tool(tabl_lay_filter)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                table_tool_event(obj);                          //调用工具栏事件处理函数
            });
            data_table_auto_height();                           //自动调节表格高度
        });

        //刷新底部的分页栏
        table_limt_refresh(AllDataCount, OnePageCount, ThisPageIndex);
    }

    //获取所有设备的基本信息-所有设备列表（ajax同步模式）
    function ajax_sync_get_all_list()
    {
        var obj = JSON.parse('[]');
        //请求服务器进行登录
        var jsonData = {
            GetFun: 'GetAllUserNameList',
        };

        try
        {
            $.ajax({
                url: '/Home/Index',
                type: 'POST',
                dataType: 'json',
                async: false,                                       //同步执行
                data: jsonData,
            })
           .done(function (response) {
               if (response.rel == 1) { //获取成功
                   obj = JSON.parse(response.obj);                 //全局缓存用户信息
                   //alert(JSON.stringify(response.obj, 4));        //调试显示信息
                   if (response.obj == null)                       //没有数据
                   {
                       layer.alert("没有获取到数据！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                   }
                   else
                   {
                       obj = JSON.parse(response.obj);  //转换为对象
                   }
               }
               else if (response.rel == -1) //需要登录
               {
                   layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                   parent.JumpLogon();
               }
               else
               {
                   layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
               }
           })
           .fail(function () {
               layer.alert('通信错误，请求数据失败！', { icon: 5, scrollbar: false }); //5：失败；6：成功
           })
        }
        catch (e)
        {
            layer.alert("发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
       

        return obj;
    }

    //获取指定用户的详细数据（ajax同步模式）UserListObj:用户基础信息列表；StartIndex：开始索引，0开始；Count：要读取的数量
    function ajax_sync_get_user_data(UserListObj, StartIndex, Count)
    {
        var obj = JSON.parse('[]');
        var SERIAL_List = "";                                   //要查询的用户信息的主键列表集合，用逗号分开
        var cnt = 0;

        try
        {
            if (UserListObj == null || UserListObj.length == 0 || Count == 0) {
                layer.alert("要获取的用户列表为空！", { icon: 5, scrollbar: false });      //5：失败；6：成功

                return obj;
            }

            if (StartIndex >= UserListObj.length) StartIndex = UserListObj.length - 1;  //限制

            //准备好要获取的用户的主键
            for (var i = StartIndex; i < UserListObj.length; i++) {
                if (i == (UserListObj.length - 1) || cnt == (Count - 1)) //最后一个
                {
                    SERIAL_List += UserListObj[i].SERIAL;
                    break;//完成了
                }
                else {
                    SERIAL_List += UserListObj[i].SERIAL + ',';
                }
                cnt++;
            }

            //请求服务器进行登录
            var jsonData = {
                GetFun: 'GetUserInfoList',
                SERIAL_List: SERIAL_List,
            };


            $.ajax({
                url: '/Home/Index',
                type: 'POST',
                dataType: 'json',
                async: false,                                       //同步执行
                data: jsonData,
            })
            .done(function (response) {
                if (response.rel == 1) { //获取成功
                    obj = JSON.parse(response.obj);                 //全局缓存用户信息
                    //alert(JSON.stringify(response.obj, 4));         //调试显示信息
                    if (response.obj == null)                       //没有数据
                    {
                        layer.alert("没有获取到数据！", { icon: 5, scrollbar: false }); //5：失败；6：成功
                    }
                    else {
                        obj = JSON.parse(response.obj);  //转换为对象
                    }
                }
                else if (response.rel == -1) //需要登录
                {
                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                    parent.JumpLogon();
                }
                else {

                    layer.alert(response.msg, { icon: 5, scrollbar: false }); //5：失败；6：成功
                }
            })
            .fail(function () {
                layer.alert('通信错误，请求数据失败！', { icon: 5, scrollbar: false }); //5：失败；6：成功
            })
        }
        catch (e)
        {
            layer.alert("发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
       

        return obj;
    }

    //将获取到的用户数据转换为能被layui table显示的数据 UserInfoObj:需要显示的详细用户信息,StartRowNumber:当前显示的行号起始，从1开始；
    function conversion_data_layui_table(UserInfoObj, StartRowNumber)
    {
        //单个用户的详细信息数据结构
        /*var obj = {
            ID: 0,
            USER: '',
            NICK_NAME: '',
            COMPANY: '',
            TEL: '',
            EMAIL: '',
            PASSWORD: '',
            REMARKS: ''
        };*/
        var UserTableData = JSON.parse('[]');                  //清空数据，创建一个对象数组

        try
        {
            if (UserInfoObj == null || UserInfoObj.length == 0)//没有数据
            {
                return UserTableData;
            }
            else
            {
                for (var i = 0; i < UserInfoObj.length; i++)
                {
                    var obj = new Object();                     //定义对象
                    //给对象添加属性
                    obj.ID = (StartRowNumber + i) + '';        //行号，加上起始行号
                    obj.USER = UserInfoObj[i].USER;
                    obj.NICK_NAME = UserInfoObj[i].NICK_NAME;
                    obj.COMPANY = UserInfoObj[i].COMPANY;
                    obj.TEL = UserInfoObj[i].TEL;
                    obj.EMAIL = UserInfoObj[i].EMAIL;
                    obj.REMARKS = UserInfoObj[i].REMARKS;
                    obj.PASSWORD = UserInfoObj[i].PASSWORD;
                    UserTableData[i] = obj;                    //添加对象到数组
                }
            }
        }
        catch (e) {
            layer.alert("处理数据发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }

        return UserTableData;
    }

    //搜索符合条件的用户基础信息列表(UserListObj:所有的用户基础信息列表；Keyword:搜索关键字，用户名与昵称）
    function search_user_list(UserListObj, Keyword)
    {
        var obj = JSON.parse('[]');
        var count = 0;

        if(UserListObj==null || UserListObj.length == 0)
        {
            layer.alert("错误：列表为空，无法搜索！", { icon: 5, scrollbar: false }); //5：失败；6：成功
            return obj;
        }
        if (Keyword == null || Keyword.length == 0)
        {
            layer.alert("错误：请输入搜索关键字！", { icon: 5, scrollbar: false }); //5：失败；6：成功
            return obj;
        }

        try 
        {
            //搜索
            for(var i = 0;i < UserListObj.length;i ++)
            {
                if ((UserListObj[i].USER.indexOf(Keyword) >= 0) || (UserListObj[i].NICK_NAME.indexOf(Keyword) >= 0))
                {
                    obj[count++] = UserListObj[i];  //找到了
                    if(count >= 1000)
                    {
                        layer.alert("搜索到超过1000个满足条件的数据，提前结束搜索，请修改搜索条件缩小范围！", { icon: 6, scrollbar: false }); //5：失败；6：成功
                        break;
                    }
                }                    
            }
            if(count == 0) //没有搜索到满足条件的数据
            {
                layer.alert("没有搜索到满足条件的用户数据！", { icon: 5, scrollbar: false }); //5：失败；6：成功
            }
        } 
        catch (e) 
        {
            layer.alert("搜索发生了错误：" + e.message, { icon: 5, scrollbar: false }); //5：失败；6：成功
        }
 
        return obj;
    }


    //弹出加载框
    function loading_message(str)
    {
        g_layer_msg_index = layer.msg('加载中',
        {
            icon: 16
          , shade: 0.5 //越大界面越黑
            , time: 60000,//时间
            anim: 0, //平滑放大
            scrollbar: false//锁定浏览器滑动
        });
    }

    //关闭所有弹出
    function close_message()
    {
        layer.close(g_layer_msg_index);         //关闭提示框   
    }

    //跳转到登录界面
    function JumpLogon() {
        parent.JumpLogon();
    }


    //读取所有设备基本信息缓存
    function Read_AllDeviceDataCache() {
        return g_AllDeviceDataCache;
    }

    //写入所有设备基本信息缓存
    function Write_AllDeviceDataCache(AllDeviceData) {
        g_AllDeviceDataCache = AllDeviceData;
    }

</script>

</body>


</html>

